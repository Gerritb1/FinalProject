Index: SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gamecodeschool.c17snake;\r\n\r\nimport android.app.Activity;\r\nimport android.graphics.Point;\r\nimport android.os.Bundle;\r\nimport android.view.Display;\r\n\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class SnakeActivity extends Activity {\r\n\r\n    // Declare an instance of SnakeGame\r\n    public static SnakeGame mSnakeGame;\r\n    static ExecutorService executorService = Executors.newFixedThreadPool(4);\r\n\r\n    // Set the game up\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        // Get the pixel dimensions of the screen\r\n        Display display = getWindowManager().getDefaultDisplay();\r\n\r\n        // Initialize the result into a Point object\r\n        Point size = new Point();\r\n        display.getSize(size);\r\n\r\n        // Create a new instance of the SnakeEngine class\r\n        mSnakeGame = new SnakeGame(this, size);\r\n\r\n        // Make snakeEngine the view of the Activity\r\n        setContentView(mSnakeGame);\r\n    }\r\n\r\n    // Start the thread in snakeEngine\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        mSnakeGame.resume();\r\n    }\r\n\r\n    // Stop the thread in snakeEngine\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        mSnakeGame.pause();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeActivity.java b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeActivity.java
--- a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeActivity.java	(revision 52998854abddb15c9b7f3020b6d15966dd6665f8)
+++ b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeActivity.java	(date 1715570450130)
@@ -12,7 +12,7 @@
 
     // Declare an instance of SnakeGame
     public static SnakeGame mSnakeGame;
-    static ExecutorService executorService = Executors.newFixedThreadPool(4);
+    //static ExecutorService executorService = Executors.newFixedThreadPool(4);
 
     // Set the game up
     @Override
Index: SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gamecodeschool.c17snake;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Point;\r\nimport android.graphics.Rect;\r\nimport android.graphics.Typeface;\r\nimport android.media.AudioAttributes;\r\nimport android.media.SoundPool;\r\nimport android.view.MotionEvent;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\nimport android.media.MediaPlayer;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport androidx.core.content.res.ResourcesCompat;\r\nimport java.util.*;\r\nimport java.util.Random;\r\nimport android.os.Handler;\r\n\r\n\r\nclass SnakeGame extends SurfaceView implements Runnable{\r\n\r\n    //Flags\r\n    private volatile boolean mPlaying = false;\r\n    private volatile boolean mPaused = true;\r\n    private boolean isFirstPause = true;\r\n    private boolean isVulnerable = false;\r\n    public static Boolean activityFlag = false;\r\n    private boolean isSnakeDead = true;\r\n\r\n    // How many points does the player have\r\n    private int mScore;\r\n\r\n    // A snake ssss\r\n    private Snake mSnake;\r\n\r\n    //Apple objects\r\n    private Apple mApple;\r\n    private YellowApple yApple;\r\n    private PoisonApple pApple;\r\n\r\n    //Rock objects\r\n    private Rock rock1;\r\n    private Rock rock2;\r\n    private Rock rock3;\r\n    private Rock rock4;\r\n    private ArrayList<Rock> rocks;\r\n\r\n    //Trash objects\r\n    private Trash trash1;\r\n    private Trash trash2;\r\n    private Trash trash3;\r\n    private Trash trash4;\r\n    private ArrayList<Trash> trashStuff;\r\n\r\n    //Energy drink object\r\n    private EnergyDrink eDrink;\r\n\r\n    // Game loop/thread objects\r\n    private Thread mThread = null;\r\n    private UpdateSystem updateSystem;\r\n\r\n    // Sound effects\r\n    private SoundPool mSP;\r\n    private int mEat_ID = -1;\r\n    private int yEat_ID = -1;\r\n    private int pEat_ID = -1;\r\n    private int mCrashID = -1;\r\n    private int mCrashIDTrash = -1;\r\n    private int mCrashIDRock = -1;\r\n\r\n    // Background music\r\n    private MediaPlayer mBackgroundMusic;\r\n\r\n    // Drawing objects\r\n    private Canvas mCanvas;\r\n    private final SurfaceHolder mSurfaceHolder;\r\n    private final Paint mPaint;\r\n    private Bitmap mBackgroundBitmap;\r\n    private DrawPauseButton drawPauseButton;\r\n    private TextDrawer textDrawer;\r\n\r\n    // Typeface for custom font\r\n    private Typeface mCustomFont;\r\n\r\n    // Game area size\r\n    private final int NUM_BLOCKS_WIDE = 40;\r\n    private int mNumBlocksHigh;\r\n\r\n    // Pause button rendering objects\r\n    private Rect mPauseButtonRect;\r\n    private Paint mPauseButtonPaint;\r\n\r\n    // Timer objects\r\n    private Handler handler;\r\n    private Runnable speedResetTimer;\r\n    private Runnable vulnerabilityTimer;\r\n\r\n    //Application context object\r\n    private Context mContext;\r\n\r\n    //Randomization\r\n    private Random random;\r\n    private int randomNumber = 0;\r\n\r\n    // Trash index & trash probability\r\n    private int trashPiece = 0;\r\n    private int trashChance = 3;\r\n\r\n    // This is the constructor method that gets called\r\n    // from SnakeActivity\r\n    protected SnakeGame(Context context, Point size) {\r\n        super(context);\r\n\r\n        // Refactored\r\n        fontTryCatch(context);\r\n\r\n        // Refactored\r\n        loadBackgroundImage(context, size);\r\n\r\n        // Refactored\r\n        soundPool();\r\n\r\n        // Refactored\r\n        tryCatch(context);\r\n\r\n        // Initialize the drawing objects\r\n        mSurfaceHolder = getHolder();\r\n        mPaint = new Paint();\r\n\r\n        // Refactored\r\n        callConstructors(context, size);\r\n\r\n        // Create the pause button\r\n        createPauseButton();\r\n\r\n        // Refactored\r\n        initialize(context);\r\n    }\r\n\r\n    // Refactored\r\n    public void initialize(Context context) {\r\n        //Initialize the drawButtonPause\r\n        drawPauseButton = DrawPauseButton.getDrawPauseButton(context, this);\r\n\r\n        updateSystem = new UpdateSystem();\r\n\r\n        //Refactored\r\n        listOfRocks();\r\n        listOfTrash();\r\n        this.mContext = context;\r\n\r\n        random = new Random();\r\n\r\n        // Initialize background music\r\n        mBackgroundMusic = MediaPlayer.create(context, R.raw.background_music);\r\n        mBackgroundMusic.setLooping(true);\r\n\r\n        handler = new Handler();\r\n    }\r\n\r\n    public void listOfRocks() {\r\n        rocks = new ArrayList<>();\r\n        rocks.add(rock1);\r\n        rocks.add(rock2);\r\n        rocks.add(rock3);\r\n        rocks.add(rock4);\r\n    }\r\n\r\n    public void listOfTrash() {\r\n        trashStuff = new ArrayList<>();\r\n        trashStuff.add(trash1);\r\n        trashStuff.add(trash2);\r\n        trashStuff.add(trash3);\r\n        trashStuff.add(trash4);\r\n    }\r\n\r\n\r\n    public boolean isPaused() {\r\n        return mPaused;\r\n    }\r\n\r\n    // Refactored\r\n    public void fontTryCatch(Context context) {\r\n        try {\r\n            // Load the custom font\r\n            mCustomFont = ResourcesCompat.getFont(context, R.font.font);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Refactored\r\n    public void loadBackgroundImage(Context context, Point size) {\r\n        // Load the background image\r\n        mBackgroundBitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.background);\r\n\r\n        // Scale the image to match the screen size\r\n        mBackgroundBitmap = Bitmap.createScaledBitmap(mBackgroundBitmap, size.x, size.y, true);\r\n    }\r\n\r\n    // Method to create and draw the pause button\r\n    public void createPauseButton() {\r\n        int buttonWidth = 400;\r\n        int buttonHeight = 100;\r\n        int buttonLeft = 800;\r\n        int buttonTop = 50;\r\n\r\n        // Create a Rect object representing the pause button's bounds\r\n        mPauseButtonRect = new Rect(buttonLeft, buttonTop, buttonLeft + buttonWidth, buttonTop + buttonHeight);\r\n\r\n        // Define the appearance of the pause button (e.g., color)\r\n        mPauseButtonPaint = new Paint();\r\n        mPauseButtonPaint.setColor(Color.RED); // Adjust color as needed\r\n    }\r\n\r\n    //Refactored\r\n    public void soundPool() {\r\n        // Initialize the SoundPool\r\n        AudioAttributes audioAttributes = new AudioAttributes.Builder()\r\n                .setUsage(AudioAttributes.USAGE_MEDIA)\r\n                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\r\n                .build();\r\n\r\n        mSP = new SoundPool.Builder()\r\n                .setMaxStreams(5)\r\n                .setAudioAttributes(audioAttributes)\r\n                .build();\r\n    }\r\n\r\n    //Refactored\r\n    public void tryCatch(Context context) {\r\n        try {\r\n            // Load the sounds from the raw folder\r\n            mEat_ID = mSP.load(context, R.raw.get_apple, 1);\r\n            mCrashIDTrash = mSP.load(context, R.raw.trash_sound, 1);\r\n            mCrashIDRock = mSP.load(context, R.raw.rock_sound, 1);\r\n            mCrashID = mSP.load(context, R.raw.game_over_sound, 1);\r\n            yEat_ID = mSP.load(context, R.raw.yellow_apple_sound, 1);\r\n            pEat_ID = mSP.load(context, R.raw.poison_apple_sound, 1);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    //Refactored\r\n    public void callConstructors(Context context, Point size) {\r\n        // Work out how many pixels each block is\r\n        int blockSize = size.x / NUM_BLOCKS_WIDE;\r\n        mNumBlocksHigh = size.y / blockSize;\r\n\r\n        // Call the constructors of our two game objects by using the Singelton pattern\r\n        mApple = Apple.getApple(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n\r\n        this.yApple = YellowApple.getYellowApple(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n\r\n        this.pApple = PoisonApple.getPoisonApple(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n\r\n        mSnake = Snake.getSnake(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n\r\n        eDrink = EnergyDrink.getEnergyDrink(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n\r\n        //Refactored\r\n        rockInitialization(context, size);\r\n        trashInitialization(context, size);\r\n    }\r\n\r\n    //Refactored\r\n    public void rockInitialization(Context context, Point size) {\r\n        // Work out how many pixels each block is\r\n        int blockSize = size.x / NUM_BLOCKS_WIDE;\r\n        mNumBlocksHigh = size.y / blockSize;\r\n\r\n        // Initializing the rocks\r\n        rock1 = Rock.getRock1(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n        rock2 = Rock.getRock2(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n        rock3 = Rock.getRock3(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n        rock4 = Rock.getRock4(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n    }\r\n\r\n    public void trashInitialization(Context context, Point size) {\r\n        // Work out how many pixels each block is\r\n        int blockSize = size.x / NUM_BLOCKS_WIDE;\r\n        mNumBlocksHigh = size.y / blockSize;\r\n\r\n        // Initializing the trash\r\n        trash1 = Trash.getTrash1(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n        trash2 = Trash.getTrash2(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n        trash3 = Trash.getTrash3(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n        trash4 = Trash.getTrash4(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n    }\r\n\r\n    // Handles the game loop\r\n    @Override\r\n    public void run() {\r\n        while (mPlaying) {\r\n            if (!mPaused) {\r\n                if (updateSystem.updateRequired() && !isSnakeDead) {\r\n                    update();\r\n                }\r\n            }\r\n\r\n            draw();\r\n\r\n        }\r\n    }\r\n\r\n    public void newGame() {\r\n\r\n        // Reset the snake and spawn the apple if it's not paused and it's the first pause\r\n        if (!mPaused && isFirstPause) {\r\n            mSnake.reset(NUM_BLOCKS_WIDE, mNumBlocksHigh);\r\n            for(Rock rock: rocks) {\r\n                rock.spawn();\r\n            }\r\n            mApple.spawn();\r\n            if(mScore > 3) {\r\n                yApple.spawn();\r\n                eDrink.spawn();\r\n            }\r\n            for(Trash trash: trashStuff) {\r\n                trash.spawn();\r\n                trash.hide();\r\n            }\r\n        }\r\n        isFirstPause = mPaused;\r\n        isSnakeDead = false;\r\n        activityFlag = true;\r\n    }\r\n\r\n    // Update the newGame() method to set isFirstPause to true\r\n    public void update() {\r\n        if (!mPaused) {\r\n            mBackgroundMusic.start();\r\n            mSnake.move();\r\n\r\n            // Refactored, this is for the red apple\r\n            updateMApple();\r\n\r\n            // Refactored, this is for the yellow apple\r\n            updateYApple();\r\n\r\n            // Refactored, this is for the poison apple\r\n            updatePApple();\r\n            updateEnergyDrink();\r\n\r\n            // Refactored\r\n            updateDeath();\r\n        }\r\n    }\r\n\r\n    // Refactored\r\n    public void updateDeath() {\r\n        boolean snakeHitRock = false;\r\n        boolean snakeHitTrash = false;\r\n\r\n        for(Rock rock: rocks) {\r\n            if (mSnake.hitRock(rock.getLocation())) {\r\n                if(!isVulnerable) {\r\n                    mSP.play(mCrashIDRock, 1, 1, 0, 0, 1);\r\n                    snakeHitRock = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for(Trash trash: trashStuff) {\r\n            if (mSnake.hitRock(trash.getLocation())) {\r\n                if(!isVulnerable) {\r\n                    mSP.play(mCrashIDTrash, 1, 1, 0, 0, 1);\r\n                    snakeHitTrash = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (mSnake.detectDeath() && !snakeHitTrash && !snakeHitRock) {\r\n            mSP.play(mCrashID, 1, 1, 0, 0, 1);\r\n        }\r\n        if (snakeHitRock || snakeHitTrash || mSnake.detectDeath()) {\r\n            startGameOverActivity();\r\n        }\r\n    }\r\n\r\n\r\n    private void startGameOverActivity() {\r\n        Intent gameOver = new Intent(mContext, GameOverActivity.class);\r\n        gameOver.putExtra(\"key\", mScore);\r\n\r\n        mContext.startActivity(gameOver);\r\n        if (mContext instanceof Activity) {\r\n            ((Activity) mContext).overridePendingTransition(0, 0);\r\n            ((Activity)  mContext).finishAffinity();\r\n        }\r\n\r\n        mBackgroundMusic.pause();\r\n        mBackgroundMusic.seekTo(0);\r\n    }\r\n\r\n    // Refactored, this is for the red apple\r\n    public void updateMApple() {\r\n        if (mSnake.checkDinner(mApple.getLocation())) {\r\n            mApple.spawn();\r\n            if (yApple.isSpawned()) {\r\n                yApple.hide();\r\n            }\r\n            if (pApple.isSpawned()) {\r\n                pApple.hide();\r\n            }\r\n            if (eDrink.isSpawned()) {\r\n                eDrink.hide();\r\n            }\r\n            mScore++;\r\n\r\n            for(int i = 0; i < 4; i++ ) {\r\n                trashStuff.get(trashPiece).chanceToSpawn(mScore, trashChance);\r\n                trashPiece = (trashPiece+1)%3;\r\n                trashChance+= 3;\r\n            }\r\n            trashChance = 4;\r\n\r\n            mSP.play(mEat_ID, 1, 1, 0, 0, 1);\r\n            randomNumber = random.nextInt(3);\r\n        }\r\n    }\r\n\r\n    // Refactored, this is for the yellow apple\r\n    public void updateYApple() {\r\n        // Check if the score is a dividable by 4 and spawn the yellow apple\r\n        if ((mScore > 0) && (mScore % 4 == 0) && !yApple.isSpawned()) {\r\n            yApple.spawn();\r\n        }\r\n        if (mSnake.bigCheckDinner(yApple.getLocation())) {\r\n            yApple.hide();\r\n            mApple.spawn();\r\n            if(pApple.isSpawned()){\r\n                pApple.hide();\r\n            }\r\n            if (eDrink.isSpawned()) {\r\n                eDrink.hide();\r\n            }\r\n            mScore+=3;\r\n\r\n            for(int i = 0; i < 4; i++ ) {\r\n                trashStuff.get(trashPiece).chanceToSpawn(mScore, trashChance);\r\n                trashPiece = (trashPiece+1)%3;\r\n                trashChance+= 4;\r\n            }\r\n            trashChance = 3;\r\n\r\n            mSP.play(yEat_ID, 1, 1, 0, 0, 1);\r\n            randomNumber = random.nextInt(3);\r\n\r\n            // to grow the snake body segment by 3, since 2+1=3\r\n            mSnake.grow(1);\r\n            mSnake.grow(2);\r\n\r\n            // Set the snake as vulnerable\r\n            isVulnerable = true;\r\n\r\n            // Set the snake as vulnerable\r\n            mSnake.setVulnerable(true);\r\n\r\n            // Start the vulnerability timer\r\n            startVulnerabilityTimer();\r\n        }\r\n    }\r\n\r\n\r\n    private void startVulnerabilityTimer() {\r\n        // Cancel any existing timer first\r\n        cancelVulnerabilityTimer();\r\n\r\n        // Create a new Runnable for the timer\r\n        vulnerabilityTimer = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // After 5 seconds, reset the vulnerability\r\n                isVulnerable = false;\r\n\r\n                // After 5 seconds, reset the vulnerability\r\n                mSnake.setVulnerable(false);\r\n            }\r\n        };\r\n\r\n        // 5 seconds for the vulnerability\r\n        handler.postDelayed(vulnerabilityTimer, 5000);\r\n    }\r\n\r\n    private void cancelVulnerabilityTimer() {\r\n        if (vulnerabilityTimer != null) {\r\n            handler.removeCallbacks(vulnerabilityTimer);\r\n        }\r\n    }\r\n\r\n    public void updateEnergyDrink() { //Refactored\r\n        // Spawn energy drink if score is a multiple of 4\r\n        if ((mScore > 0) && (mScore % 4 == 0) && !eDrink.isSpawned()) {\r\n            eDrink.spawn();\r\n        }\r\n\r\n        // If snake eats the energy drink\r\n        if (mSnake.checkDrink(eDrink.getLocation())) {\r\n            eDrink.hide();\r\n            mApple.spawn();\r\n            if (pApple.isSpawned()) {\r\n                pApple.hide();\r\n            }\r\n            if (yApple.isSpawned()) {\r\n                yApple.hide();\r\n            }\r\n            if(mApple.isSpawned()) {\r\n                mApple.hide();\r\n            }\r\n\r\n            randomNumber = random.nextInt(3);\r\n\r\n            // Increase snake speed\r\n            snakeSpeed();\r\n        }\r\n    }\r\n\r\n    public void snakeSpeed() { //Extracted from updateEnergyDrink\r\n        // Increase game speed\r\n        updateSystem.setTargetFPS(20);\r\n\r\n        // Cancel any existing timer\r\n        if (speedResetTimer != null) {\r\n            handler.removeCallbacks(speedResetTimer);\r\n        }\r\n\r\n        // Start a new timer to reset the speed after 5 seconds\r\n        speedResetTimer = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // Reset game speed\r\n                updateSystem.setTargetFPS(10);\r\n            }\r\n        };\r\n        handler.postDelayed(speedResetTimer, 5000);\r\n    }\r\n\r\n    // Refactored, this is for the poison apple\r\n    public void updatePApple() {\r\n        if (mSnake.bigCheckDinner(pApple.getLocation())) {\r\n            mScore -= 2;\r\n            if(pApple.isSpawned()) {\r\n                pApple.hide();\r\n                mApple.spawn();\r\n            }\r\n            if (yApple.isSpawned()) {\r\n                yApple.hide();\r\n            }\r\n            if (eDrink.isSpawned()) {\r\n                eDrink.hide();\r\n            }\r\n\r\n            mSP.play(pEat_ID, 1, 1, 0, 0, 1);\r\n            if(mScore < 0)\r\n                startGameOverActivity();\r\n            else {\r\n                mSnake.shrink(3);\r\n                randomNumber = random.nextInt(4);\r\n            }\r\n        }\r\n\r\n        if ((mScore > 0) && (randomNumber == 1) && !pApple.isSpawned()) {\r\n            pApple.spawn();\r\n        }\r\n    }\r\n\r\n    //Refactored\r\n    public void resetGameState(){ //Extracted from resetGame\r\n        //Reset game objects\r\n        mApple.spawn();\r\n        mApple.hide();\r\n        mSnake.reset(NUM_BLOCKS_WIDE, mNumBlocksHigh);\r\n        mSnake.hide(); // Hide the snake upon resetting the game\r\n        eDrink.hide();\r\n\r\n        //Reset flags\r\n        isFirstPause = true;\r\n        mPaused = true;\r\n        mSnake.setVulnerable(false);\r\n        isVulnerable = false;\r\n        isSnakeDead = true;\r\n        activityFlag = false;\r\n\r\n        // Cancel the vulnerability timer\r\n        cancelVulnerabilityTimer();\r\n\r\n        //Reset game loop speed if snake dies\r\n        updateSystem.setTargetFPS(10);\r\n\r\n    }\r\n\r\n    // Refactored\r\n    public void spawnHide() {\r\n        for(Rock rock: rocks) {\r\n            rock.spawn();\r\n            rock.hide();\r\n        }\r\n\r\n        for(Trash trash: trashStuff) {\r\n            trash.spawn();\r\n            trash.hide();\r\n        }\r\n\r\n        if(yApple.isSpawned()) {\r\n            yApple.hide();\r\n            yApple.spawned = false;\r\n        }\r\n\r\n        if(pApple.isSpawned()) {\r\n            pApple.hide();\r\n            pApple.spawned = false;\r\n        }\r\n        if (eDrink.isSpawned()){\r\n            eDrink.hide();\r\n            eDrink.spawned = false;\r\n        }\r\n    }\r\n\r\n    public void draw() {\r\n        // Get a lock on the canvas\r\n        if (mSurfaceHolder.getSurface().isValid()) {\r\n            mCanvas = mSurfaceHolder.lockCanvas();\r\n\r\n            // Draw the background image\r\n            mCanvas.drawBitmap(mBackgroundBitmap, 0, 0, null);\r\n\r\n            // Draw the score\r\n            drawColorSize();\r\n\r\n            // Refactored\r\n            drawConditions();\r\n\r\n            // Unlock the canvas and reveal the graphics for this frame\r\n            mSurfaceHolder.unlockCanvasAndPost(mCanvas);\r\n        }\r\n    }\r\n\r\n    // Refactored\r\n    public void drawConditions() {\r\n        // Check and draw conditions based on game state (paused, tap to play, etc.)\r\n        checkDrawConditions();\r\n\r\n        // Draw the pause button in any case except for the initial \"Tap to play\" state\r\n        if (!isFirstPause || !mPaused) {\r\n            drawPauseButton.drawButton(mCanvas, mPaint);\r\n        }\r\n\r\n        // Draw game elements if not paused\r\n        if (!mPaused) {\r\n            // Refactored\r\n            drawSpawnables();\r\n        }\r\n    }\r\n\r\n    //Refactored\r\n    public void checkDrawConditions() {\r\n        if (isFirstPause && mPaused) {\r\n            // Draw the \"Tap to play\" prompt if the game is initially paused\r\n            drawPaused();\r\n        } else if (mPaused) {\r\n            // Draw the names if the game is paused\r\n            if (textDrawer == null) {\r\n                textDrawer = new TextDrawer(mContext, mCanvas, mPaint);\r\n\r\n                textDrawer.drawNames(mCustomFont);\r\n            }\r\n\r\n            // Check if NameDrawer instance is not null before calling drawNames\r\n            if (textDrawer != null) {\r\n                textDrawer.drawNames(mCustomFont);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void drawColorSize() {\r\n        // Set the size and color of the mPaint for the text\r\n        mPaint.setColor(Color.argb(255, 255, 255, 255));\r\n        mPaint.setTextSize(120);\r\n\r\n        // Draw the score\r\n        mCanvas.drawText(\"\" + mScore, 20, 120, mPaint);\r\n\r\n        // Draw the apples and the snake\r\n        mApple.draw(mCanvas, mPaint);\r\n        mSnake.draw(mCanvas, mPaint);\r\n        yApple.draw(mCanvas, mPaint);\r\n        pApple.draw(mCanvas, mPaint);\r\n        eDrink.draw(mCanvas, mPaint);\r\n\r\n        // Draw the Rocks\r\n        for(Rock rock: rocks) {\r\n            rock.draw(mCanvas, mPaint);\r\n        }\r\n\r\n        // Draw the Trash\r\n        for(Trash trash: trashStuff) {\r\n            trash.draw(mCanvas, mPaint);\r\n        }\r\n\r\n    }\r\n\r\n    // Refactored\r\n    public void drawSpawnables() {\r\n        // Draw the rock only if the game is not paused\r\n        for(Rock rock: rocks) {\r\n            rock.draw(mCanvas, mPaint);\r\n        }\r\n\r\n        // Draw the Trash only if the game is not paused\r\n        for(Trash trash: trashStuff) {\r\n            trash.draw(mCanvas, mPaint);\r\n        }\r\n\r\n        // Draw the apple only if the game is not paused\r\n        mApple.draw(mCanvas, mPaint);\r\n\r\n        yApple.draw(mCanvas, mPaint);\r\n\r\n        pApple.draw(mCanvas, mPaint);\r\n\r\n        eDrink.draw(mCanvas, mPaint);\r\n    }\r\n\r\n    // Refactored\r\n    public void drawPaused() {\r\n        // Set the size and color of the mPaint for the text\r\n        mPaint.setColor(Color.argb(255, 203, 67, 53));\r\n        mPaint.setTextSize(250);\r\n        // Set the custom font to the Paint object\r\n        mPaint.setTypeface(mCustomFont);\r\n\r\n        if (isFirstPause && mPaused) {\r\n            if (textDrawer == null) {\r\n                // Instantiate TextDrawer preparing for Injection\r\n                textDrawer = new TextDrawer(mContext, mCanvas, mPaint);\r\n            }\r\n\r\n            //Refactored\r\n            textDrawer.drawTapToPlay(ResourcesCompat.getFont(mContext, R.font.retro));\r\n\r\n            textDrawer.drawNames(mCustomFont);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent motionEvent) {\r\n        if ((motionEvent.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {\r\n            if (isFirstPause && isSnakeDead) {\r\n                // If the game beginning, start the game\r\n                mPaused = false;\r\n                newGame();\r\n            } else if (mPaused && mPauseButtonRect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {\r\n                //If the game is paused, resume the game\r\n                mPaused = false;\r\n            } else if (mPauseButtonRect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {\r\n                // If the pause button is touched, pause the game\r\n                mPaused = true;\r\n                mBackgroundMusic.pause();\r\n            } else if (!mPaused) {\r\n                // If the game is running and not paused, handle snake movement\r\n                mSnake.switchHeading(motionEvent);\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Stop the thread\r\n    public void pause() {\r\n        mPlaying = false;\r\n        try {\r\n            mThread.join();\r\n        } catch (InterruptedException e) {\r\n            // Error\r\n        }\r\n    }\r\n\r\n    // Start the thread\r\n    public void resume() {\r\n        mPlaying = true;\r\n        mThread = new Thread(this);\r\n        mThread.start();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeGame.java b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeGame.java
--- a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeGame.java	(revision 52998854abddb15c9b7f3020b6d15966dd6665f8)
+++ b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeGame.java	(date 1715570450082)
@@ -114,7 +114,7 @@
 
     // This is the constructor method that gets called
     // from SnakeActivity
-    protected SnakeGame(Context context, Point size) {
+    public SnakeGame(Context context, Point size) {
         super(context);
 
         // Refactored
@@ -435,7 +435,7 @@
         mContext.startActivity(gameOver);
         if (mContext instanceof Activity) {
             ((Activity) mContext).overridePendingTransition(0, 0);
-            ((Activity)  mContext).finishAffinity();
+            ((Activity) mContext).finishAffinity();
         }
 
         mBackgroundMusic.pause();
@@ -624,8 +624,8 @@
         eDrink.hide();
 
         //Reset flags
-        isFirstPause = true;
-        mPaused = true;
+        isFirstPause = false;
+        mPaused = false;
         mSnake.setVulnerable(false);
         isVulnerable = false;
         isSnakeDead = true;
@@ -691,7 +691,7 @@
         checkDrawConditions();
 
         // Draw the pause button in any case except for the initial "Tap to play" state
-        if (!isFirstPause || !mPaused) {
+        if (!isFirstPause ) {
             drawPauseButton.drawButton(mCanvas, mPaint);
         }
 
Index: SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gamecodeschool.c17snake;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Typeface;\r\nimport android.view.MotionEvent;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\n\r\nimport androidx.core.content.res.ResourcesCompat;\r\n\r\npublic class GameOverScreen extends SurfaceView implements Runnable {\r\n    Context gContext;\r\n    private int score, highscore;\r\n    SurfaceHolder gSurfaceHolder;\r\n    Canvas gCanvas;\r\n    Paint gPaint;\r\n    TextDrawer textDrawer;\r\n    volatile boolean playing;\r\n    private Thread thread = null;\r\n    SharedPreferences mPrefs;\r\n\r\n\r\n\r\n    public GameOverScreen(Context context, int score, int Highscore) {\r\n        super(context);\r\n        this.score = score;\r\n        gContext = context;\r\n        highscore = Highscore;\r\n        mPrefs = context.getSharedPreferences(\"Highscore\", 0);\r\n        innitDrawing();\r\n    }\r\n    public void innitDrawing(){\r\n        gCanvas = new Canvas();\r\n        gPaint = new Paint();\r\n        gSurfaceHolder = getHolder();\r\n        gPaint = new Paint();\r\n        textDrawer = new TextDrawer(gContext, gCanvas, gPaint);\r\n    }\r\n\r\n\r\n    private void drawGameOver(Context context, int score){\r\n        if(gSurfaceHolder.getSurface().isValid()) {\r\n            gCanvas = gSurfaceHolder.lockCanvas();\r\n            gCanvas.drawColor(Color.BLACK);\r\n            Typeface customFont = ResourcesCompat.getFont(context, R.font.retro);\r\n            gPaint.setTypeface(customFont);\r\n\r\n            gPaint.setColor(Color.RED);\r\n            gPaint.setTextSize(150);\r\n            gCanvas.drawText(\"GAME OVER\", 550, 150, gPaint);\r\n\r\n            gPaint.setColor(Color.WHITE);\r\n            gPaint.setTextSize(75);\r\n            gCanvas.drawText(\"Your Score: \" + score, 650, 250, gPaint);\r\n\r\n            gCanvas.drawText(\"Highscore:  \" + highscore, 650, 350, gPaint);\r\n\r\n            gCanvas.drawText(\"Tap To Play Again!\", 550, 500, gPaint);\r\n\r\n\r\n//            gPaint.setColor(Color.WHITE);\r\n//            gPaint.setTypeface(customFont);\r\n//            gPaint.setTextSize(150);\r\n//            String scoreString = \"\" + score;\r\n//            String scoreMessage = \"Your Score: \";\r\n//            gCanvas.drawText(\" your score: \", 50, 50, gPaint);\r\n\r\n            //textDrawer.drawGameOver(customFont);\r\n            //textDrawer.drawScore(score, customFont);\r\n\r\n            gSurfaceHolder.unlockCanvasAndPost(gCanvas);\r\n        }\r\n\r\n    }\r\n\r\n    public boolean onTouchEvent(MotionEvent motionEvent){\r\n        if ((motionEvent.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {\r\n            if(gContext instanceof Activity){\r\n                SnakeGame.activityFlag = true;\r\n                Intent newGame = new Intent(gContext, SnakeActivity.class);\r\n                gContext.startActivity(newGame);\r\n                ((Activity) gContext).finishAffinity();\r\n                ((Activity) gContext).overridePendingTransition(0,0);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public void pause() {\r\n        playing = false;\r\n        try {\r\n            thread.join();\r\n        } catch (InterruptedException e) {\r\n            // Error\r\n        }\r\n\r\n    }\r\n\r\n    public void resume() {\r\n        playing = true;\r\n        thread = new Thread(this);\r\n        thread.start();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void run() {\r\n        while (playing) {\r\n            drawGameOver(gContext, score);\r\n        }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverScreen.java b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverScreen.java
--- a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverScreen.java	(revision 52998854abddb15c9b7f3020b6d15966dd6665f8)
+++ b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverScreen.java	(date 1715572193177)
@@ -4,9 +4,12 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Paint;
+import android.graphics.Point;
 import android.graphics.Typeface;
 import android.view.MotionEvent;
 import android.view.SurfaceHolder;
@@ -25,15 +28,22 @@
     private Thread thread = null;
     SharedPreferences mPrefs;
 
+    private Bitmap background;
+
 
 
-    public GameOverScreen(Context context, int score, int Highscore) {
+
+    public GameOverScreen(Context context, int score, int Highscore, Point size) {
         super(context);
         this.score = score;
         gContext = context;
         highscore = Highscore;
         mPrefs = context.getSharedPreferences("Highscore", 0);
         innitDrawing();
+        background = BitmapFactory.decodeResource(context.getResources(), R.drawable.gameoverbg);
+
+        // Scale the image to match the screen size
+        background = Bitmap.createScaledBitmap(background, size.x, size.y, true);
     }
     public void innitDrawing(){
         gCanvas = new Canvas();
@@ -41,27 +51,28 @@
         gSurfaceHolder = getHolder();
         gPaint = new Paint();
         textDrawer = new TextDrawer(gContext, gCanvas, gPaint);
+
     }
 
 
     private void drawGameOver(Context context, int score){
         if(gSurfaceHolder.getSurface().isValid()) {
             gCanvas = gSurfaceHolder.lockCanvas();
-            gCanvas.drawColor(Color.BLACK);
+            gCanvas.drawBitmap(background, 0, 0, null);
             Typeface customFont = ResourcesCompat.getFont(context, R.font.retro);
             gPaint.setTypeface(customFont);
 
             gPaint.setColor(Color.RED);
-            gPaint.setTextSize(150);
-            gCanvas.drawText("GAME OVER", 550, 150, gPaint);
-
-            gPaint.setColor(Color.WHITE);
             gPaint.setTextSize(75);
-            gCanvas.drawText("Your Score: " + score, 650, 250, gPaint);
+            gCanvas.drawText("GAME OVER", 800, 250, gPaint);
 
-            gCanvas.drawText("Highscore:  " + highscore, 650, 350, gPaint);
+            gPaint.setColor(Color.WHITE);
+            gPaint.setTextSize(50);
+            gCanvas.drawText("Your Score: " + score, 850, 350, gPaint);
 
-            gCanvas.drawText("Tap To Play Again!", 550, 500, gPaint);
+            gCanvas.drawText("Highscore:  " + highscore, 850, 410, gPaint);
+
+            gCanvas.drawText("Tap To Play Again!", 550, 550, gPaint);
 
 
 //            gPaint.setColor(Color.WHITE);
Index: SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gamecodeschool.c17snake;\r\n\r\nimport android.app.Activity;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Point;\r\nimport android.os.Bundle;\r\nimport android.view.Display;\r\n\r\n\r\npublic class GameOverActivity extends Activity {\r\n\r\n    private GameOverScreen gameOverScreen;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        // Get the pixel dimensions of the screen\r\n        Display display = getWindowManager().getDefaultDisplay();\r\n        SnakeActivity.mSnakeGame.spawnHide();\r\n        SnakeActivity.mSnakeGame.resetGameState();\r\n\r\n        // Initialize the result into a Point object\r\n        Point size = new Point();\r\n        display.getSize(size);\r\n        int score = 0;\r\n\r\n        Bundle extras = getIntent().getExtras();\r\n        if (extras != null) {\r\n            score = extras.getInt(\"key\");\r\n            //The key argument here must match that used in the other activity\r\n        }\r\n\r\n        SharedPreferences sharedPref = getPreferences(MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = sharedPref.edit();\r\n        if(score > sharedPref.getInt(\"scoreKey\", 0)) {\r\n            editor.putInt(\"scoreKey\", score);\r\n            editor.apply();\r\n        }\r\n\r\n        int Highscore = sharedPref.getInt(\"scoreKey\", 0);\r\n\r\n\r\n        gameOverScreen = new GameOverScreen(this, score, Highscore);\r\n\r\n        setContentView(gameOverScreen);\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        gameOverScreen.resume();\r\n    }\r\n\r\n    // Stop the thread in snakeEngine\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        gameOverScreen.pause();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverActivity.java b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverActivity.java
--- a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverActivity.java	(revision 52998854abddb15c9b7f3020b6d15966dd6665f8)
+++ b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverActivity.java	(date 1715571347262)
@@ -40,7 +40,7 @@
         int Highscore = sharedPref.getInt("scoreKey", 0);
 
 
-        gameOverScreen = new GameOverScreen(this, score, Highscore);
+        gameOverScreen = new GameOverScreen(this, score, Highscore, size);
 
         setContentView(gameOverScreen);
 
Index: SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/DrawPauseButton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gamecodeschool.c17snake;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Point;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.Display;\r\nimport android.view.SurfaceView;\r\nimport android.view.WindowManager;\r\n\r\npublic class DrawPauseButton extends SurfaceView {\r\n\r\n    private SnakeGame snakeGame;\r\n    private int screenWidth;\r\n    private int screenHeight;\r\n    private int buttonWidth;\r\n    private int buttonHeight;\r\n    private int buttonLeft;\r\n    private int buttonTop;\r\n    private float textWidth;\r\n    private float textX;\r\n    private float textY;\r\n\r\n    // Maintain a single global reference to the DrawPauseButton\r\n    private static DrawPauseButton drawPauseButton;\r\n\r\n    private DrawPauseButton(Context context, SnakeGame snakeGame) {\r\n        super(context);\r\n        this.snakeGame = snakeGame;\r\n    }\r\n\r\n    // Provide access to the DrawPauseButton, creating it if necessary\r\n    public static DrawPauseButton getDrawPauseButton(Context context, SnakeGame snakeGame) {\r\n        if(drawPauseButton == null)\r\n            drawPauseButton = new DrawPauseButton(context, snakeGame);\r\n        return drawPauseButton;\r\n    }\r\n\r\n    public Point getScreenDimensions() {\r\n        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);\r\n        Display display = wm.getDefaultDisplay();\r\n        DisplayMetrics metrics = new DisplayMetrics();\r\n        display.getMetrics(metrics);\r\n        screenWidth = metrics.widthPixels;\r\n        screenHeight = metrics.heightPixels;\r\n        return new Point(screenWidth, screenHeight);\r\n    }\r\n\r\n    public void drawButton(Canvas canvas, Paint paint) {\r\n\r\n        drawButton(paint);\r\n\r\n        // Draw a rounded rectangle representing the button\r\n        canvas.drawRoundRect(\r\n                buttonLeft, buttonTop,\r\n                buttonLeft + buttonWidth, buttonTop + buttonHeight,\r\n                25, 25, paint\r\n        );\r\n\r\n        // Set color and size for the button text\r\n        paint.setColor(Color.WHITE);\r\n        paint.setTextSize(buttonHeight * 0.9f);\r\n\r\n        drawButtonText(canvas, paint);\r\n\r\n    }\r\n\r\n    //Method Overloading\r\n    public void drawButton(Paint paint) {\r\n        // Set color for the button background\r\n        paint.setColor(Color.argb(100, 203, 67, 53));\r\n\r\n        // Get screen dimensions\r\n        Point screenDimensions = getScreenDimensions();\r\n        screenWidth = screenDimensions.x;\r\n        screenHeight = screenDimensions.y;\r\n\r\n        // Define the size and position of the button relative to screen dimensions\r\n        buttonWidth = screenWidth / 9;\r\n        buttonHeight = screenHeight / 20;\r\n        buttonLeft = (screenWidth - buttonWidth) / 2;\r\n        buttonTop = screenHeight / 10;\r\n    }\r\n\r\n    public void drawButtonText(Canvas canvas, Paint paint) {\r\n\r\n        // Determine the text to be displayed based on the pause state\r\n        String buttonText = snakeGame.isPaused() ? \"Resume\" : \"Pause\";\r\n\r\n        // Calculate the position to center the text within the button\r\n        textWidth = paint.measureText(buttonText);\r\n        textX = buttonLeft + (buttonWidth - textWidth) / 2;\r\n        textY = buttonTop + (float) buttonHeight / 2 + paint.getTextSize() / 3; // Adjust for vertical centering\r\n\r\n        // Draw the determined text at the center of the button\r\n        canvas.drawText(buttonText, textX, textY, paint);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/DrawPauseButton.java b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/DrawPauseButton.java
--- a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/DrawPauseButton.java	(revision 52998854abddb15c9b7f3020b6d15966dd6665f8)
+++ b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/DrawPauseButton.java	(date 1715570450154)
@@ -12,7 +12,7 @@
 
 public class DrawPauseButton extends SurfaceView {
 
-    private SnakeGame snakeGame;
+    private SnakeGame Game;
     private int screenWidth;
     private int screenHeight;
     private int buttonWidth;
@@ -28,7 +28,7 @@
 
     private DrawPauseButton(Context context, SnakeGame snakeGame) {
         super(context);
-        this.snakeGame = snakeGame;
+        Game = snakeGame;
     }
 
     // Provide access to the DrawPauseButton, creating it if necessary
@@ -82,12 +82,13 @@
         buttonHeight = screenHeight / 20;
         buttonLeft = (screenWidth - buttonWidth) / 2;
         buttonTop = screenHeight / 10;
+
     }
 
     public void drawButtonText(Canvas canvas, Paint paint) {
 
         // Determine the text to be displayed based on the pause state
-        String buttonText = snakeGame.isPaused() ? "Resume" : "Pause";
+        String buttonText = Game.isPaused() ? "Resume" : "Pause";
 
         // Calculate the position to center the text within the button
         textWidth = paint.measureText(buttonText);
