Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n<<<<<<< Updated upstream\r\n    <list default=\"true\" id=\"be50f442-e7c0-4c5b-b2c3-a135faa8c4de\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/SnakeGame/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/SnakeGame/.idea/misc.xml\" afterDir=\"false\" />\r\n    </list>\r\n=======\r\n    <list default=\"true\" id=\"2dbf286d-bcce-44b4-9941-ad2c91fbc65b\" name=\"Changes\" comment=\"\" />\r\n>>>>>>> Stashed changes\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ClangdSettings\">\r\n    <option name=\"formatViaClangd\" value=\"false\" />\r\n  </component>\r\n<<<<<<< Updated upstream\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2epYW9xHuUvwS4mcYyOm7AclO4G\" />\r\n=======\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$/SnakeGame\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand />\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2eqjUuO2ddZXWuDjrJk56AEyx5N\" />\r\n>>>>>>> Stashed changes\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n<<<<<<< Updated upstream\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.cidr.known.project.marker\": \"true\",\r\n    \"cf.first.check.clang-format\": \"false\",\r\n    \"cidr.known.project.marker\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"last_opened_file_path\": \"C:/Users/C74736/Documents/CSC 133/Final Project/FinalProject/SnakeGame\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"be50f442-e7c0-4c5b-b2c3-a135faa8c4de\" name=\"Changes\" comment=\"\" />\r\n      <created>1712603015519</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1712603015519</updated>\r\n=======\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,\r\n    &quot;android.gradle.sync.needed&quot;: &quot;true&quot;,\r\n    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,\r\n    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;HKtrill-Branch&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/calde/OneDrive/Desktop/CSC133/FinalProject/SnakeGame/settings.gradle.kts&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Snake_game.app\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\">\r\n      <module name=\"Snake_game.app.main\" />\r\n      <option name=\"DEPLOY\" value=\"true\" />\r\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\r\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\r\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\r\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\r\n      <option name=\"ALL_USERS\" value=\"false\" />\r\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\r\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\r\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\r\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\r\n      <option name=\"MODE\" value=\"default_activity\" />\r\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\r\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\r\n      <option name=\"INSPECTION_WITHOUT_ACTIVITY_RESTART\" value=\"false\" />\r\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\r\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\r\n      <Auto>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Auto>\r\n      <Hybrid>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Hybrid>\r\n      <Java>\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Java>\r\n      <Native>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Native>\r\n      <Profilers>\r\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\r\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\r\n      </Profilers>\r\n      <option name=\"DEEP_LINK\" value=\"\" />\r\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\r\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\r\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\r\n      <method v=\"2\">\r\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2dbf286d-bcce-44b4-9941-ad2c91fbc65b\" name=\"Changes\" comment=\"\" />\r\n      <created>1712639023467</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1712639023467</updated>\r\n>>>>>>> Stashed changes\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b4164e38ffaad8422f153a5c47c712b075a41ddc)
+++ b/.idea/workspace.xml	(date 1713715484905)
@@ -4,13 +4,12 @@
     <option name="autoReloadType" value="NONE" />
   </component>
   <component name="ChangeListManager">
-<<<<<<< Updated upstream
+Updated upstream
     <list default="true" id="be50f442-e7c0-4c5b-b2c3-a135faa8c4de" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/SnakeGame/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/SnakeGame/.idea/misc.xml" afterDir="false" />
     </list>
-=======
     <list default="true" id="2dbf286d-bcce-44b4-9941-ad2c91fbc65b" name="Changes" comment="" />
->>>>>>> Stashed changes
+     Stashed changes
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -19,12 +18,12 @@
   <component name="ClangdSettings">
     <option name="formatViaClangd" value="false" />
   </component>
-<<<<<<< Updated upstream
+Updated upstream
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="ProjectId" id="2epYW9xHuUvwS4mcYyOm7AclO4G" />
-=======
+
   <component name="ExternalProjectsData">
     <projectState path="$PROJECT_DIR$/SnakeGame">
       <ProjectState />
@@ -50,12 +49,12 @@
   &quot;associatedIndex&quot;: 7
 }</component>
   <component name="ProjectId" id="2eqjUuO2ddZXWuDjrJk56AEyx5N" />
->>>>>>> Stashed changes
+  Stashed changes
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-<<<<<<< Updated upstream
+ Updated upstream
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "RunOnceActivity.ShowReadmeOnStart": "true",
@@ -74,7 +73,7 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1712603015519</updated>
-=======
+
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
Index: SnakeGame/app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.gamecodeschool.c17snake\">\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.SnakeGame\">\r\n        <activity android:name=\".SnakeActivity\"\r\n            android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\r\n            android:screenOrientation=\"landscape\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/AndroidManifest.xml b/SnakeGame/app/src/main/AndroidManifest.xml
--- a/SnakeGame/app/src/main/AndroidManifest.xml	(revision b4164e38ffaad8422f153a5c47c712b075a41ddc)
+++ b/SnakeGame/app/src/main/AndroidManifest.xml	(date 1713715561653)
@@ -9,10 +9,14 @@
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
         android:theme="@style/Theme.SnakeGame">
-        <activity android:name=".SnakeActivity"
-            android:theme="@android:style/Theme.NoTitleBar.Fullscreen"
+        <activity
+            android:name=".GameOverActivity"
+            android:exported="false" />
+        <activity
+            android:name=".SnakeActivity"
+            android:exported="true"
             android:screenOrientation="landscape"
-            android:exported="true">
+            android:theme="@android:style/Theme.NoTitleBar.Fullscreen">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
 
Index: SnakeGame/app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id(\"com.android.application\")\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.gamecodeschool.c17snake\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.gamecodeschool.c17snake\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_1_8\r\n        targetCompatibility = JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\r\n    implementation(\"com.google.android.material:material:1.11.0\")\r\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\r\n    testImplementation(\"junit:junit:4.13.2\")\r\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\r\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/build.gradle.kts b/SnakeGame/app/build.gradle.kts
--- a/SnakeGame/app/build.gradle.kts	(revision b4164e38ffaad8422f153a5c47c712b075a41ddc)
+++ b/SnakeGame/app/build.gradle.kts	(date 1713715561472)
@@ -33,6 +33,7 @@
     implementation("androidx.appcompat:appcompat:1.6.1")
     implementation("com.google.android.material:material:1.11.0")
     implementation("androidx.constraintlayout:constraintlayout:2.1.4")
+    implementation("androidx.activity:activity:1.8.0")
     testImplementation("junit:junit:4.13.2")
     androidTestImplementation("androidx.test.ext:junit:1.1.5")
     androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
Index: SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/TextDrawer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gamecodeschool.c17snake;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Point;\r\nimport android.view.SurfaceView;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class TextDrawer extends SurfaceView implements IText {\r\n\r\n    private static Apple mApple;\r\n    private static Snake mSnake;\r\n    private DrawPauseButton getScreen;\r\n    private final Canvas mCanvas;\r\n    private final Paint mPaint;\r\n    private final SnakeGame mSnakeGame;\r\n    private int mScore;\r\n    private int ss;\r\n    private YellowApple yApple;\r\n    private ArrayList<Rock> rocks;\r\n    private Point mr;\r\n\r\n\r\n    // Constructor of NameDrawer class with DI\r\n    public TextDrawer(Context context, Canvas canvas, Paint paint, SnakeGame snakeGame) {\r\n        super(context);\r\n        this.mCanvas = canvas;\r\n        this.mPaint = paint;\r\n        this.mSnakeGame = snakeGame;\r\n    }\r\n\r\n    // Setter method for injecting DrawPauseButton dependency\r\n    public void setDrawPauseButton(DrawPauseButton getScreen) {this.getScreen = getScreen; }\r\n    public void setSnake(Snake snake){ mSnake = snake;}\r\n\r\n    // Method for drawing names\r\n    @Override\r\n    public void drawNames() { //Extracted from SnakeGame\r\n        Point screenDimensions = getScreen.getScreenDimensions();\r\n        int screenWidth = screenDimensions.x;\r\n        int xCoordinate = screenWidth - 340; // Adjust this value as needed\r\n\r\n        mPaint.setColor(Color.argb(255, 255, 255, 255));\r\n        mPaint.setTextSize(30);\r\n        mCanvas.drawText(getResources().getString(R.string.name1), xCoordinate, 50, mPaint);\r\n        mCanvas.drawText(getResources().getString(R.string.name2), xCoordinate, 85, mPaint);\r\n        mCanvas.drawText(getResources().getString(R.string.name3), xCoordinate, 120, mPaint);\r\n        mCanvas.drawText(getResources().getString(R.string.name4), xCoordinate, 155, mPaint);\r\n        mCanvas.drawText(getResources().getString(R.string.name5), xCoordinate, 190, mPaint);\r\n    }\r\n\r\n    // Method for drawing \"Tap to play\" message\r\n    @Override\r\n    public void drawTapToPlay() { //Extracted from SnakeGame\r\n        // Draw the \"Tap to play\" message if the game is initially paused\r\n        String message = getResources().getString(R.string.tap_to_play);\r\n\r\n        // Get the width and height of the message\r\n        float messageWidth = mPaint.measureText(message);\r\n        float messageHeight = mPaint.getFontMetrics().bottom - mPaint.getFontMetrics().top;\r\n\r\n        // Get the screen dimensions\r\n        Point screenDimensions = getScreen.getScreenDimensions();\r\n        int screenWidth = screenDimensions.x;\r\n        int screenHeight = screenDimensions.y;\r\n\r\n        // Calculate the position to center the text horizontally and vertically\r\n        float centerX = (screenWidth - messageWidth) / 2;\r\n        float centerY = (screenHeight + messageHeight) / 2;\r\n\r\n        // Draw the \"Tap to play\" message centered on the screen\r\n        mCanvas.drawText(message, centerX, centerY, mPaint);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/TextDrawer.java b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/TextDrawer.java
--- a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/TextDrawer.java	(revision b4164e38ffaad8422f153a5c47c712b075a41ddc)
+++ b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/TextDrawer.java	(date 1713715484921)
@@ -69,7 +69,7 @@
 
         // Calculate the position to center the text horizontally and vertically
         float centerX = (screenWidth - messageWidth) / 2;
-        float centerY = (screenHeight + messageHeight) / 2;
+        float centerY = (screenHeight + messageHeight/2) / 2;
 
         // Draw the "Tap to play" message centered on the screen
         mCanvas.drawText(message, centerX, centerY, mPaint);
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <value>\r\n      <entry key=\"app\">\r\n        <State />\r\n      </entry>\r\n    </value>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision b4164e38ffaad8422f153a5c47c712b075a41ddc)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1713715691044)
@@ -2,7 +2,7 @@
 <project version="4">
   <component name="deploymentTargetDropDown">
     <value>
-      <entry key="app">
+      <entry key="Snake_game.app">
         <State />
       </entry>
     </value>
Index: SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/Screens.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/Screens.java b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/Screens.java
new file mode 100644
--- /dev/null	(date 1713715495334)
+++ b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/Screens.java	(date 1713715495334)
@@ -0,0 +1,46 @@
+package com.gamecodeschool.c17snake;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.util.DisplayMetrics;
+import android.view.Display;
+import android.view.SurfaceView;
+import android.view.WindowManager;
+
+public abstract class Screens extends SurfaceView {
+    private SnakeGame snakeGame;
+    private Paint sPaint;
+    private Canvas sCanvas;
+
+    public Screens(Context context) {
+        super(context);
+
+    }
+
+    //returns Pointer object <x,y>
+    //X represents the width of the screen
+    //Y represents the height of the screen
+    protected Point getScreenDimensions(){
+        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
+        Display display = wm.getDefaultDisplay();
+        DisplayMetrics metrics = new DisplayMetrics();
+        display.getMetrics(metrics);
+        return new Point(metrics.widthPixels, metrics.heightPixels);
+    }
+
+    //Returns a Pointer object <x,y>
+    //X represents the width of the string
+    //Y represents the height of the string
+    protected Point getMessageDimensions(String message){
+        return new Point((int) sPaint.measureText(message), (int) (sPaint.getFontMetrics().bottom - sPaint.getFontMetrics().top));
+    }
+
+    //Returns a Pointer object <x,y>
+    //X represents the coordinate that centers a message horizontally
+    //Y represents the coordinate that centers a message vertically
+    protected Point getCenterPoint(Point screenDimensions, Point messageDimensions){
+        return new Point((screenDimensions.x - messageDimensions.x), (screenDimensions.y + messageDimensions.y/2) / 2);
+    }
+}
Index: SnakeGame/app/src/main/res/values/attrs_game_over_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/res/values/attrs_game_over_view.xml b/SnakeGame/app/src/main/res/values/attrs_game_over_view.xml
new file mode 100644
--- /dev/null	(date 1713715485018)
+++ b/SnakeGame/app/src/main/res/values/attrs_game_over_view.xml	(date 1713715485018)
@@ -0,0 +1,8 @@
+<resources>
+    <declare-styleable name="GameOverView">
+        <attr name="exampleString" format="string" />
+        <attr name="exampleDimension" format="dimension" />
+        <attr name="exampleColor" format="color" />
+        <attr name="exampleDrawable" format="color|reference" />
+    </declare-styleable>
+</resources>
\ No newline at end of file
Index: SnakeGame/app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/res/values/styles.xml b/SnakeGame/app/src/main/res/values/styles.xml
new file mode 100644
--- /dev/null	(date 1713715484953)
+++ b/SnakeGame/app/src/main/res/values/styles.xml	(date 1713715484953)
@@ -0,0 +1,7 @@
+<resources>
+
+    <style name="Widget.Theme.SnakeGame.MyView" parent="">
+        <item name="android:background">@color/gray_400</item>
+        <item name="exampleColor">@color/light_blue_400</item>
+    </style>
+</resources>
\ No newline at end of file
Index: .idea/libraries/Gradle__androidx_core_core_ktx_1_2_0_aar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Gradle__androidx_core_core_ktx_1_2_0_aar.xml b/.idea/libraries/Gradle__androidx_core_core_ktx_1_2_0_aar.xml
new file mode 100644
--- /dev/null	(date 1713715495361)
+++ b/.idea/libraries/Gradle__androidx_core_core_ktx_1_2_0_aar.xml	(date 1713715495361)
@@ -0,0 +1,12 @@
+<component name="libraryTable">
+  <library name="Gradle: androidx.core:core-ktx:1.2.0@aar" external-system-id="GRADLE">
+    <CLASSES>
+      <root url="jar://$USER_HOME$/.gradle/caches/transforms-3/1927cbde6bd111b9a6d65328f0442b6b/transformed/core-ktx-1.2.0/jars/classes.jar!/" />
+      <root url="file://$USER_HOME$/.gradle/caches/transforms-3/1927cbde6bd111b9a6d65328f0442b6b/transformed/core-ktx-1.2.0/AndroidManifest.xml" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES>
+      <root url="jar://$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.core/core-ktx/1.2.0/75eb613f7dec270f611d0adff5fcb0e8b617fe0a/core-ktx-1.2.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Gradle__androidx_fragment_fragment_1_3_6_aar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Gradle__androidx_fragment_fragment_1_3_6_aar.xml b/.idea/libraries/Gradle__androidx_fragment_fragment_1_3_6_aar.xml
new file mode 100644
--- /dev/null	(date 1713715495375)
+++ b/.idea/libraries/Gradle__androidx_fragment_fragment_1_3_6_aar.xml	(date 1713715495375)
@@ -0,0 +1,16 @@
+<component name="libraryTable">
+  <library name="Gradle: androidx.fragment:fragment:1.3.6@aar" external-system-id="GRADLE">
+    <ANNOTATIONS>
+      <root url="jar://$USER_HOME$/.gradle/caches/transforms-3/65612b5fae6c2aa4265237c94fd623b4/transformed/fragment-1.3.6/annotations.zip!/" />
+    </ANNOTATIONS>
+    <CLASSES>
+      <root url="jar://$USER_HOME$/.gradle/caches/transforms-3/65612b5fae6c2aa4265237c94fd623b4/transformed/fragment-1.3.6/jars/classes.jar!/" />
+      <root url="file://$USER_HOME$/.gradle/caches/transforms-3/65612b5fae6c2aa4265237c94fd623b4/transformed/fragment-1.3.6/res" />
+      <root url="file://$USER_HOME$/.gradle/caches/transforms-3/65612b5fae6c2aa4265237c94fd623b4/transformed/fragment-1.3.6/AndroidManifest.xml" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES>
+      <root url="jar://$USER_HOME$/.gradle/caches/modules-2/files-2.1/androidx.fragment/fragment/1.3.6/25ece06338d39da1fdc9d8488aa57b5014866918/fragment-1.3.6-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: SnakeGame/app/src/main/res/values-night/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/res/values-night/styles.xml b/SnakeGame/app/src/main/res/values-night/styles.xml
new file mode 100644
--- /dev/null	(date 1713715484993)
+++ b/SnakeGame/app/src/main/res/values-night/styles.xml	(date 1713715484993)
@@ -0,0 +1,7 @@
+<resources>
+
+    <style name="Widget.Theme.SnakeGame.MyView" parent="">
+        <item name="android:background">@color/gray_600</item>
+        <item name="exampleColor">@color/light_blue_600</item>
+    </style>
+</resources>
\ No newline at end of file
Index: SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverActivity.java b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverActivity.java
new file mode 100644
--- /dev/null	(date 1713717793775)
+++ b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverActivity.java	(date 1713717793775)
@@ -0,0 +1,35 @@
+package com.gamecodeschool.c17snake;
+
+import android.app.Activity;
+import android.graphics.Point;
+import android.os.Bundle;
+import android.view.Display;
+
+import androidx.activity.EdgeToEdge;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.core.graphics.Insets;
+import androidx.core.view.ViewCompat;
+import androidx.core.view.WindowInsetsCompat;
+
+public class GameOverActivity extends Activity {
+
+    private GameOverScreen gameOverScreen;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // Get the pixel dimensions of the screen
+        Display display = getWindowManager().getDefaultDisplay();
+
+        // Initialize the result into a Point object
+        Point size = new Point();
+        display.getSize(size);
+
+        gameOverScreen = new GameOverScreen(this, size);
+
+        setContentView(gameOverScreen);
+
+
+
+    }
+}
\ No newline at end of file
Index: SnakeGame/app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <color name=\"black\">#FF000000</color>\r\n    <color name=\"white\">#FFFFFFFF</color>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/res/values/colors.xml b/SnakeGame/app/src/main/res/values/colors.xml
--- a/SnakeGame/app/src/main/res/values/colors.xml	(revision b4164e38ffaad8422f153a5c47c712b075a41ddc)
+++ b/SnakeGame/app/src/main/res/values/colors.xml	(date 1713715485043)
@@ -2,4 +2,8 @@
 <resources>
     <color name="black">#FF000000</color>
     <color name="white">#FFFFFFFF</color>
+    <color name="light_blue_400">#FF29B6F6</color>
+    <color name="light_blue_600">#FF039BE5</color>
+    <color name="gray_400">#FFBDBDBD</color>
+    <color name="gray_600">#FF757575</color>
 </resources>
\ No newline at end of file
Index: SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.gamecodeschool.c17snake;\r\n\r\nimport android.content.Context;\r\nimport android.content.res.AssetFileDescriptor;\r\nimport android.content.res.AssetManager;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Point;\r\nimport android.graphics.Rect;\r\nimport android.graphics.Typeface;\r\nimport android.media.AudioAttributes;\r\nimport android.media.SoundPool;\r\nimport android.view.MotionEvent;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\nimport java.io.IOException;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport androidx.core.content.res.ResourcesCompat;\r\nimport java.util.*;\r\nimport java.util.Random;\r\n\r\nclass SnakeGame extends SurfaceView implements Runnable, Game {\r\n\r\n    // Objects for the game loop/thread\r\n    private Thread mThread = null;\r\n\r\n    private boolean isFirstPause = true;\r\n\r\n    // Is the game currently playing and or paused?\r\n    private volatile boolean mPlaying = false;\r\n    private volatile boolean mPaused = true;\r\n\r\n    // for playing sound effects\r\n    private SoundPool mSP;\r\n    private int mEat_ID = -1;\r\n    private int mCrashID = -1;\r\n\r\n    // The size in segments of the playable area\r\n    private final int NUM_BLOCKS_WIDE = 40;\r\n    private int mNumBlocksHigh;\r\n\r\n    // How many points does the player have\r\n    private int mScore;\r\n\r\n    //Pause button rendering objects\r\n    private Rect mPauseButtonRect;\r\n    private Paint mPauseButtonPaint;\r\n\r\n    // Objects for drawing\r\n    private Canvas mCanvas;\r\n    private final SurfaceHolder mSurfaceHolder;\r\n    private final Paint mPaint;\r\n\r\n    // Typeface object to hold the custom font\r\n    private Typeface mCustomFont;\r\n\r\n    // A snake ssss\r\n    private Snake mSnake;\r\n    // And an apple\r\n    private Apple mApple;\r\n\r\n    //And an Yellow Apple\r\n    private YellowApple yApple;\r\n\r\n    // And a Poisoned Apple\r\n    private PoisonApple pApple;\r\n\r\n    // And four rock objects\r\n    private Rock rock1;\r\n    private Rock rock2;\r\n    private Rock rock3;\r\n    private Rock rock4;\r\n    private ArrayList<Rock> rocks;\r\n\r\n    private Bitmap mBackgroundBitmap;\r\n    private final DrawPauseButton drawPauseButton;\r\n    private final UpdateSystem updateSystem;\r\n    private TextDrawer DrawNames;\r\n    private Context mContext;\r\n    private TextDrawer textDrawer;\r\n\r\n    private Random random;\r\n\r\n    private int randomNumber = 0;\r\n\r\n    // This is the constructor method that gets called\r\n    // from SnakeActivity\r\n    protected SnakeGame(Context context, Point size) {\r\n        super(context);\r\n\r\n        // Refactored\r\n        fontTryCatch(context);\r\n\r\n        // Refactored\r\n        loadBackgroundImage(context, size);\r\n\r\n        // Refactored\r\n        soundPool();\r\n\r\n        // Refactored\r\n        tryCatch(context);\r\n\r\n        // Initialize the drawing objects\r\n        mSurfaceHolder = getHolder();\r\n        mPaint = new Paint();\r\n\r\n        // Refactored\r\n        callConstructors(context, size);\r\n\r\n        // Create the pause button\r\n        createPauseButton();\r\n\r\n        //Initialize the drawButtonPause\r\n        drawPauseButton = DrawPauseButton.getDrawPauseButton(context, this);\r\n        updateSystem = new UpdateSystem();\r\n\r\n        //Refactored\r\n        listOfRocks();\r\n        this.mContext = context;\r\n\r\n        random = new Random();\r\n\r\n    }\r\n\r\n    public void listOfRocks() {\r\n        rocks = new ArrayList<>();\r\n        rocks.add(rock1);\r\n        rocks.add(rock2);\r\n        rocks.add(rock3);\r\n        rocks.add(rock4);\r\n    }\r\n\r\n    public boolean isPaused() {\r\n        return mPaused;\r\n    }\r\n\r\n    // Refactored\r\n    @Override\r\n    public void fontTryCatch(Context context) {\r\n        try {\r\n            // Load the custom font\r\n            mCustomFont = ResourcesCompat.getFont(context, R.font.font);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Refactored\r\n    @Override\r\n    public void loadBackgroundImage(Context context, Point size) {\r\n        // Load the background image\r\n        mBackgroundBitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.background);\r\n\r\n        // Scale the image to match the screen size\r\n        mBackgroundBitmap = Bitmap.createScaledBitmap(mBackgroundBitmap, size.x, size.y, true);\r\n    }\r\n\r\n    // Method to create and draw the pause button\r\n    @Override\r\n    public void createPauseButton() {\r\n\r\n        int buttonWidth = 400;\r\n        int buttonHeight = 100;\r\n        int buttonLeft = 800;\r\n        int buttonTop = 50;\r\n\r\n        // Create a Rect object representing the pause button's bounds\r\n        mPauseButtonRect = new Rect(buttonLeft, buttonTop, buttonLeft + buttonWidth, buttonTop + buttonHeight);\r\n\r\n        // Define the appearance of the pause button (e.g., color)\r\n        mPauseButtonPaint = new Paint();\r\n        mPauseButtonPaint.setColor(Color.RED); // Adjust color as needed\r\n    }\r\n\r\n    //Refactored\r\n    @Override\r\n    public void soundPool() {\r\n        // Initialize the SoundPool\r\n        AudioAttributes audioAttributes = new AudioAttributes.Builder()\r\n                .setUsage(AudioAttributes.USAGE_MEDIA)\r\n                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\r\n                .build();\r\n\r\n        mSP = new SoundPool.Builder()\r\n                .setMaxStreams(5)\r\n                .setAudioAttributes(audioAttributes)\r\n                .build();\r\n    }\r\n\r\n    //Refactored\r\n    @Override\r\n    public void tryCatch(Context context) {\r\n        try {\r\n            AssetManager assetManager = context.getAssets();\r\n            AssetFileDescriptor descriptor;\r\n\r\n            // Prepare the sounds in memory\r\n            descriptor = assetManager.openFd(\"get_apple.ogg\");\r\n            mEat_ID = mSP.load(descriptor, 0);\r\n\r\n            descriptor = assetManager.openFd(\"snake_death.ogg\");\r\n            mCrashID = mSP.load(descriptor, 0);\r\n\r\n        } catch (IOException e) {\r\n            // Error\r\n        }\r\n    }\r\n\r\n    //Refactored\r\n    @Override\r\n    public void callConstructors(Context context, Point size) {\r\n        // Work out how many pixels each block is\r\n        int blockSize = size.x / NUM_BLOCKS_WIDE;\r\n        mNumBlocksHigh = size.y / blockSize;\r\n\r\n        // Call the constructors of our two game objects by using the Singelton pattern\r\n        mApple = Apple.getApple(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n\r\n        yApple = YellowApple.getYellowApple(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n\r\n        pApple = PoisonApple.getPoisonApple(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n\r\n        mSnake = Snake.getSnake(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n\r\n        //Refactored\r\n        rockInitialization(context, size);\r\n\r\n    }\r\n\r\n    //Refactored\r\n    public void rockInitialization(Context context, Point size) {\r\n        // Work out how many pixels each block is\r\n        int blockSize = size.x / NUM_BLOCKS_WIDE;\r\n        mNumBlocksHigh = size.y / blockSize;\r\n\r\n        // Initializing the rocks\r\n        rock1 = Rock.getRock1(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n        rock2 = Rock.getRock2(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n        rock3 = Rock.getRock3(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n        rock4 = Rock.getRock4(context,\r\n                new Point(NUM_BLOCKS_WIDE,\r\n                        mNumBlocksHigh),\r\n                blockSize);\r\n    }\r\n\r\n    // Handles the game loop\r\n    @Override\r\n    public void run() {\r\n        while (mPlaying) {\r\n            if(!mPaused) {\r\n                if (updateSystem.updateRequired()) {\r\n                    update();\r\n                }\r\n            }\r\n            draw();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void newGame() {\r\n        // Reset the snake and spawn the apple if it's not paused and it's the first pause\r\n        if (!mPaused && isFirstPause) {\r\n            mSnake.reset(NUM_BLOCKS_WIDE, mNumBlocksHigh);\r\n            mApple.spawn();\r\n            if(mScore > 3) {\r\n                yApple.spawn();\r\n            }\r\n            for(Rock rock: rocks) {\r\n                rock.spawn();\r\n            }\r\n        }\r\n\r\n        isFirstPause = mPaused;\r\n    }\r\n\r\n    // Update the newGame() method to set isFirstPause to true\r\n    @Override\r\n    public void update() {\r\n        if (!mPaused) {\r\n            mSnake.move();\r\n\r\n            // Refactored, this is for the red apple\r\n            updateMApple();\r\n\r\n            // Refactored, this is for the yellow apple\r\n            updateYApple();\r\n\r\n            // Refactored, this is for the poison apple\r\n            updatePApple();\r\n\r\n            for(Rock rock: rocks) {\r\n                if (mSnake.hitRock(rock.getLocation())) {\r\n                    resetGame();\r\n                }\r\n            }\r\n\r\n            if (mSnake.detectDeath()) {\r\n                // Reset the score and the game if snake dies\r\n                resetGame();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Refactored, this is for the red apple\r\n    public void updateMApple() {\r\n        if (mSnake.checkDinner(mApple.getLocation())) {\r\n            mApple.spawn();\r\n            if (yApple.isSpawned()) {\r\n                yApple.hide();\r\n            }\r\n            if (pApple.isSpawned()) {\r\n                pApple.hide();\r\n            }\r\n            mScore++;\r\n            mSP.play(mEat_ID, 1, 1, 0, 0, 1);\r\n            randomNumber = random.nextInt(4);\r\n        }\r\n    }\r\n\r\n    // Refactored, this is for the yellow apple\r\n    public void updateYApple() {\r\n        // Check if the score is a dividable by 4 and spawn the yellow apple\r\n        if ((mScore > 0) && (mScore % 4 == 0) && !yApple.isSpawned()) {\r\n            yApple.spawn();\r\n        }\r\n\r\n        if (mSnake.bigCheckDinner(yApple.getLocation())) {\r\n            yApple.hide();\r\n            mApple.spawn();\r\n            if(pApple.isSpawned()){\r\n                pApple.hide();\r\n            }\r\n            mScore+=3;\r\n            mSP.play(mEat_ID, 1, 1, 0, 0, 1);\r\n\r\n            randomNumber = random.nextInt(3);\r\n\r\n            // to grow the snake body segment by 3, since 2+1=3\r\n            mSnake.grow(2);\r\n        }\r\n    }\r\n\r\n    // Refactored, this is for the poison apple\r\n    public void updatePApple() {\r\n        if (mSnake.bigCheckDinner(pApple.getLocation())) {\r\n            mScore -= 2;\r\n            if (mScore < 0) {\r\n                resetGame();\r\n            } else {\r\n                pApple.hide();\r\n                mApple.spawn();\r\n                if (yApple.isSpawned()) {\r\n                    yApple.hide();\r\n                }\r\n                mSP.play(mEat_ID, 1, 1, 0, 0, 1);\r\n\r\n                mSnake.shrink(3);\r\n                randomNumber = random.nextInt(5);\r\n            }\r\n        }\r\n\r\n        if ((mScore > 0) && (randomNumber == 2) && !pApple.isSpawned()) {\r\n            pApple.spawn();\r\n        }\r\n    }\r\n\r\n    private void resetGame() {\r\n        if (!mPaused) {\r\n            mScore = 0;\r\n\r\n            // Refactored\r\n            spawnHide();\r\n\r\n            mApple.spawn();\r\n            mApple.hide(); // Hide the apple upon resetting the game\r\n            mSnake.reset(NUM_BLOCKS_WIDE, mNumBlocksHigh);\r\n            mSnake.hide(); // Hide the snake upon resetting the game\r\n            isFirstPause = true; // Set isFirstPause to true upon resetting the game\r\n            mPaused = true; // Set mPaused to true upon resetting the game\r\n        }\r\n    }\r\n\r\n    // Refactored\r\n    public void spawnHide() {\r\n        for(Rock rock: rocks) {\r\n            rock.spawn();\r\n            rock.hide();\r\n        }\r\n\r\n        if(yApple.isSpawned()) {\r\n            yApple.hide();\r\n            yApple.spawned = false;\r\n        }\r\n\r\n        if(pApple.isSpawned()) {\r\n            pApple.hide();\r\n            pApple.spawned = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void draw() {\r\n        // Get a lock on the canvas\r\n        if (mSurfaceHolder.getSurface().isValid()) {\r\n            mCanvas = mSurfaceHolder.lockCanvas();\r\n\r\n            // Draw the background image\r\n            mCanvas.drawBitmap(mBackgroundBitmap, 0, 0, null);\r\n\r\n            // Draw the score\r\n            drawColorSize();\r\n\r\n            // Refactored\r\n            drawConditions();\r\n\r\n            // Unlock the canvas and reveal the graphics for this frame\r\n            mSurfaceHolder.unlockCanvasAndPost(mCanvas);\r\n        }\r\n    }\r\n\r\n    // Refactored\r\n    public void drawConditions() {\r\n        // Check and draw conditions based on game state (paused, tap to play, etc.)\r\n        checkDrawConditions();\r\n\r\n        // Draw the pause button in any case except for the initial \"Tap to play\" state\r\n        if (!isFirstPause || !mPaused) {\r\n            drawPauseButton.drawButton(mCanvas, mPaint);\r\n        }\r\n\r\n        // Draw game elements if not paused\r\n        if (!mPaused) {\r\n            // Refactored\r\n            drawSpawnables();\r\n        }\r\n    }\r\n\r\n    //Refactored for extraction\r\n    public void checkDrawConditions() {\r\n        if (isFirstPause && mPaused) {\r\n            // Draw the \"Tap to play\" prompt if the game is initially paused\r\n            drawPaused();\r\n        } else if (mPaused) {\r\n            // Draw the names if the game is paused\r\n            if (textDrawer == null) {\r\n                textDrawer = new TextDrawer(getContext(), mCanvas, mPaint, this);\r\n                textDrawer.setDrawPauseButton(DrawPauseButton.getDrawPauseButton(getContext(), this));\r\n                textDrawer.drawNames();\r\n            }\r\n\r\n            // Check if NameDrawer instance is not null before calling drawNames\r\n            if (textDrawer != null) {\r\n                textDrawer.drawNames();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void drawColorSize() {\r\n        // Set the size and color of the mPaint for the text\r\n        mPaint.setColor(Color.argb(255, 255, 255, 255));\r\n        mPaint.setTextSize(120);\r\n\r\n        // Draw the score\r\n        mCanvas.drawText(\"\" + mScore, 20, 120, mPaint);\r\n\r\n        // Draw the apples and the snake\r\n        mApple.draw(mCanvas, mPaint);\r\n        mSnake.draw(mCanvas, mPaint);\r\n        yApple.draw(mCanvas, mPaint);\r\n        pApple.draw(mCanvas, mPaint);\r\n\r\n        // Draw the Rocks\r\n        for(Rock rock: rocks) {\r\n            rock.draw(mCanvas, mPaint);\r\n        }\r\n\r\n    }\r\n\r\n    // Refactored\r\n    public void drawSpawnables() {\r\n        // Draw the rock only if the game is not paused\r\n        for(Rock rock: rocks) {\r\n            rock.draw(mCanvas, mPaint);\r\n        }\r\n        // Draw the apple only if the game is not paused\r\n        mApple.draw(mCanvas, mPaint);\r\n\r\n        yApple.draw(mCanvas, mPaint);\r\n\r\n        pApple.draw(mCanvas, mPaint);\r\n    }\r\n\r\n    // Refactored\r\n    @Override\r\n    public void drawPaused() {\r\n        // Set the size and color of the mPaint for the text\r\n        mPaint.setColor(Color.argb(255, 203, 67, 53));\r\n        mPaint.setTextSize(250);\r\n        // Set the custom font to the Paint object\r\n        mPaint.setTypeface(mCustomFont);\r\n\r\n        if (isFirstPause && mPaused) {\r\n            if(textDrawer == null) {\r\n                // Instantiate TextDrawer preparing for Injection\r\n                textDrawer = new TextDrawer(mContext, mCanvas, mPaint, this);\r\n                textDrawer.setDrawPauseButton(drawPauseButton); //Injecting\r\n            }\r\n\r\n            //Refactored\r\n            textDrawer.drawTapToPlay();\r\n            textDrawer.drawNames();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent motionEvent) {\r\n        if ((motionEvent.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {\r\n            if (isFirstPause) {\r\n                // If the game beginning, start the game\r\n                mPaused = false;\r\n                newGame();\r\n            }else if(mPaused && mPauseButtonRect.contains((int) motionEvent.getX(), (int) motionEvent.getY())){\r\n                //If the game is paused, resume the game\r\n                mPaused = false;\r\n            }else if (mPauseButtonRect.contains((int) motionEvent.getX(), (int) motionEvent.getY())) {\r\n                // If the pause button is touched, pause the game\r\n                mPaused = true;\r\n            } else if (!mPaused) {\r\n                // If the game is running and not paused, handle snake movement\r\n                mSnake.switchHeading(motionEvent);\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Stop the thread\r\n    @Override\r\n    public void pause() {\r\n        mPlaying = false;\r\n        try {\r\n            mThread.join();\r\n        } catch (InterruptedException e) {\r\n            // Error\r\n        }\r\n    }\r\n\r\n    // Start the thread\r\n    @Override\r\n    public void resume() {\r\n        mPlaying = true;\r\n        mThread = new Thread(this);\r\n        mThread.start();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeGame.java b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeGame.java
--- a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeGame.java	(revision b4164e38ffaad8422f153a5c47c712b075a41ddc)
+++ b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/SnakeGame.java	(date 1713720395749)
@@ -21,12 +21,12 @@
 import java.util.*;
 import java.util.Random;
 
-class SnakeGame extends SurfaceView implements Runnable, Game {
+class SnakeGame extends SurfaceView implements Runnable {
 
     // Objects for the game loop/thread
     private Thread mThread = null;
 
-    private boolean isFirstPause = true;
+    protected boolean isFirstPause = true;
 
     // Is the game currently playing and or paused?
     private volatile boolean mPlaying = false;
@@ -50,11 +50,12 @@
 
     // Objects for drawing
     private Canvas mCanvas;
-    private final SurfaceHolder mSurfaceHolder;
+    private Canvas sCanvas;
+    protected final SurfaceHolder mSurfaceHolder;
     private final Paint mPaint;
 
     // Typeface object to hold the custom font
-    private Typeface mCustomFont;
+    protected Typeface mCustomFont;
 
     // A snake ssss
     private Snake mSnake;
@@ -77,13 +78,14 @@
     private Bitmap mBackgroundBitmap;
     private final DrawPauseButton drawPauseButton;
     private final UpdateSystem updateSystem;
-    private TextDrawer DrawNames;
     private Context mContext;
     private TextDrawer textDrawer;
 
     private Random random;
+    private boolean isSnakeDead = true;
 
     private int randomNumber = 0;
+    private SurfaceHolder sf;
 
     // This is the constructor method that gets called
     // from SnakeActivity
@@ -104,6 +106,7 @@
 
         // Initialize the drawing objects
         mSurfaceHolder = getHolder();
+        sf = getHolder();
         mPaint = new Paint();
 
         // Refactored
@@ -132,12 +135,13 @@
         rocks.add(rock4);
     }
 
+
     public boolean isPaused() {
         return mPaused;
     }
 
     // Refactored
-    @Override
+
     public void fontTryCatch(Context context) {
         try {
             // Load the custom font
@@ -148,17 +152,17 @@
     }
 
     // Refactored
-    @Override
     public void loadBackgroundImage(Context context, Point size) {
         // Load the background image
         mBackgroundBitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.background);
 
         // Scale the image to match the screen size
         mBackgroundBitmap = Bitmap.createScaledBitmap(mBackgroundBitmap, size.x, size.y, true);
+
     }
 
     // Method to create and draw the pause button
-    @Override
+
     public void createPauseButton() {
 
         int buttonWidth = 400;
@@ -175,7 +179,6 @@
     }
 
     //Refactored
-    @Override
     public void soundPool() {
         // Initialize the SoundPool
         AudioAttributes audioAttributes = new AudioAttributes.Builder()
@@ -190,7 +193,6 @@
     }
 
     //Refactored
-    @Override
     public void tryCatch(Context context) {
         try {
             AssetManager assetManager = context.getAssets();
@@ -209,7 +211,6 @@
     }
 
     //Refactored
-    @Override
     public void callConstructors(Context context, Point size) {
         // Work out how many pixels each block is
         int blockSize = size.x / NUM_BLOCKS_WIDE;
@@ -271,15 +272,16 @@
     public void run() {
         while (mPlaying) {
             if(!mPaused) {
-                if (updateSystem.updateRequired()) {
+                if (updateSystem.updateRequired() && !isSnakeDead) {
                     update();
                 }
             }
-            draw();
+
+                draw();
+
         }
     }
 
-    @Override
     public void newGame() {
         // Reset the snake and spawn the apple if it's not paused and it's the first pause
         if (!mPaused && isFirstPause) {
@@ -294,10 +296,10 @@
         }
 
         isFirstPause = mPaused;
+        isSnakeDead = false;
     }
 
     // Update the newGame() method to set isFirstPause to true
-    @Override
     public void update() {
         if (!mPaused) {
             mSnake.move();
@@ -314,12 +316,22 @@
             for(Rock rock: rocks) {
                 if (mSnake.hitRock(rock.getLocation())) {
                     resetGame();
+                    sCanvas = mSurfaceHolder.lockCanvas();
+                    sCanvas.drawColor(Color.BLACK);
+                    mSurfaceHolder.unlockCanvasAndPost(sCanvas);
                 }
             }
 
             if (mSnake.detectDeath()) {
                 // Reset the score and the game if snake dies
                 resetGame();
+
+
+                mCanvas = mSurfaceHolder.lockCanvas();
+                mCanvas.drawColor(Color.BLACK);
+                mSurfaceHolder.unlockCanvasAndPost(mCanvas);
+
+
             }
         }
     }
@@ -398,8 +410,9 @@
             mApple.hide(); // Hide the apple upon resetting the game
             mSnake.reset(NUM_BLOCKS_WIDE, mNumBlocksHigh);
             mSnake.hide(); // Hide the snake upon resetting the game
-            isFirstPause = true; // Set isFirstPause to true upon resetting the game
-            mPaused = true; // Set mPaused to true upon resetting the game
+            isFirstPause = true;// Set isFirstPause to true upon resetting the game
+            isSnakeDead = true;
+            //mPaused = true; // Set mPaused to true upon resetting the game
         }
     }
 
@@ -421,14 +434,13 @@
         }
     }
 
-    @Override
     public void draw() {
         // Get a lock on the canvas
         if (mSurfaceHolder.getSurface().isValid()) {
             mCanvas = mSurfaceHolder.lockCanvas();
 
             // Draw the background image
-            mCanvas.drawBitmap(mBackgroundBitmap, 0, 0, null);
+            mCanvas.drawBitmap(mBackgroundBitmap, 0, 0, mPaint);
 
             // Draw the score
             drawColorSize();
@@ -479,7 +491,6 @@
     }
 
 
-    @Override
     public void drawColorSize() {
         // Set the size and color of the mPaint for the text
         mPaint.setColor(Color.argb(255, 255, 255, 255));
@@ -516,7 +527,6 @@
     }
 
     // Refactored
-    @Override
     public void drawPaused() {
         // Set the size and color of the mPaint for the text
         mPaint.setColor(Color.argb(255, 203, 67, 53));
@@ -540,7 +550,7 @@
     @Override
     public boolean onTouchEvent(MotionEvent motionEvent) {
         if ((motionEvent.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {
-            if (isFirstPause) {
+            if (isFirstPause && isSnakeDead) {
                 // If the game beginning, start the game
                 mPaused = false;
                 newGame();
@@ -560,7 +570,6 @@
     }
 
     // Stop the thread
-    @Override
     public void pause() {
         mPlaying = false;
         try {
@@ -571,7 +580,6 @@
     }
 
     // Start the thread
-    @Override
     public void resume() {
         mPlaying = true;
         mThread = new Thread(this);
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision b4164e38ffaad8422f153a5c47c712b075a41ddc)
+++ b/.idea/misc.xml	(date 1713733859101)
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
Index: SnakeGame/app/src/main/res/layout/sample_game_over_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/res/layout/sample_game_over_view.xml b/SnakeGame/app/src/main/res/layout/sample_game_over_view.xml
new file mode 100644
--- /dev/null	(date 1713715485035)
+++ b/SnakeGame/app/src/main/res/layout/sample_game_over_view.xml	(date 1713715485035)
@@ -0,0 +1,16 @@
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <com.gamecodeschool.c17snake.GameOverView
+        style="@style/Widget.Theme.SnakeGame.MyView"
+        android:layout_width="300dp"
+        android:layout_height="300dp"
+        android:paddingLeft="20dp"
+        android:paddingBottom="40dp"
+        app:exampleDimension="24sp"
+        app:exampleDrawable="@android:drawable/ic_menu_add"
+        app:exampleString="Hello, GameOverView" />
+
+</FrameLayout>
\ No newline at end of file
Index: SnakeGame/app/src/main/res/layout/activity_game_over.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/res/layout/activity_game_over.xml b/SnakeGame/app/src/main/res/layout/activity_game_over.xml
new file mode 100644
--- /dev/null	(date 1713715561710)
+++ b/SnakeGame/app/src/main/res/layout/activity_game_over.xml	(date 1713715561710)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/main"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".GameOverActivity">
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverScreen.java b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverScreen.java
new file mode 100644
--- /dev/null	(date 1713719461582)
+++ b/SnakeGame/app/src/main/java/com/gamecodeschool/c17snake/GameOverScreen.java	(date 1713719461582)
@@ -0,0 +1,38 @@
+package com.gamecodeschool.c17snake;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+
+public class GameOverScreen extends SurfaceView {
+    private SnakeGame snakeGame;
+    private Canvas gCanvas;
+    private Paint gPaint;
+    private SurfaceHolder gSurfaceHolder;
+
+    public GameOverScreen(Context context, Point size) {
+        super(context);
+
+    }
+
+
+
+    private void drawGameOver(){
+      //  sCanvas = snakeGame.mSurfaceHolder.lockCanvas();
+      //  sCanvas.drawColor(Color.BLACK);
+
+
+
+
+    }
+
+    private SnakeGame getSnakeGame(){
+        return snakeGame;
+    }
+}
